{
  "version": 3,
  "sources": ["../src/firmware-flasher.js"],
  "sourcesContent": ["/**\n * Firmware Flasher for ESP32 Web Flasher\n * Handles firmware download, NVS generation, and flashing\n */\n\nexport class FirmwareFlasher {\n    constructor(ui, configManager) {\n        this.ui = ui;\n        this.configManager = configManager;\n    }\n\n    async flash(project, espStub, options = {}) {\n        try {\n            this.ui.log('Starting flash process...', 'info');\n            this.ui.showProgress();\n\n            let firmwareData;\n\n            // Check if using custom firmware file\n            if (options.customFirmware) {\n                this.ui.updateStatus('flashing', 'Using custom firmware...', `File: ${options.customFirmware.name}`);\n                this.ui.log('Using custom firmware file: ' + options.customFirmware.name, 'warning');\n                firmwareData = await options.customFirmware.arrayBuffer();\n                this.ui.log(`Loaded ${(firmwareData.byteLength / 1024).toFixed(1)} KB from custom file`, 'success');\n            } else {\n                // Download firmware from release\n                this.ui.updateStatus('flashing', 'Downloading firmware...', 'Please wait');\n                this.ui.log('Firmware URL: ' + project.firmwareUrl, 'info');\n                const response = await fetch(project.firmwareUrl);\n\n                if (!response.ok) {\n                    throw new Error(`Failed to download firmware: ${response.status} ${response.statusText}`);\n                }\n\n                firmwareData = await response.arrayBuffer();\n                this.ui.log(`Downloaded ${(firmwareData.byteLength / 1024).toFixed(1)} KB`, 'success');\n            }\n\n            // Convert firmware to binary string\n            const firmwareBytes = new Uint8Array(firmwareData);\n            let firmwareBinary = '';\n            for (let i = 0; i < firmwareBytes.length; i++) {\n                firmwareBinary += String.fromCharCode(firmwareBytes[i]);\n            }\n\n            // Prepare file array for flashing\n            const fileArray = [{ data: firmwareBinary, address: 0x0 }];\n\n            // Generate NVS partition if project has config sections\n            if (project.configSections && project.nvsPartition) {\n                await this.generateAndAddNVS(project, fileArray);\n            }\n\n            this.ui.updateStatus('flashing', 'Writing to flash...', 'Do not disconnect');\n\n            await espStub.writeFlash({\n                fileArray: fileArray,\n                flashSize: 'keep',\n                compress: true,\n                reportProgress: (idx, written, total) => {\n                    const percent = Math.round((written / total) * 100);\n                    this.ui.updateProgress(percent, written, total);\n                }\n            });\n\n            this.ui.updateStatus('success', 'Flash complete!', 'Device ready to use');\n            this.ui.log('Flash completed successfully', 'success');\n\n            return true;\n\n        } catch (error) {\n            this.handleFlashError(error, project);\n            throw error;\n        }\n    }\n\n    async generateAndAddNVS(project, fileArray) {\n        this.ui.updateStatus('flashing', 'Generating NVS config...', 'Please wait');\n        this.ui.log('Generating NVS partition from configuration...', 'info');\n\n        try {\n            const config = this.configManager.getConfig();\n\n            // Build NVS data from config using nvsKey mappings\n            const nvsData = {};\n            const namespace = project.nvsPartition.namespace || 'config';\n            nvsData[namespace] = {};\n\n            project.configSections.forEach(section => {\n                section.fields.forEach(field => {\n                    if (field.nvsKey) {\n                        const value = config[section.id]?.[field.id];\n                        if (value !== undefined && value !== '') {\n                            nvsData[namespace][field.nvsKey] = value;\n                        }\n                    }\n                });\n            });\n\n            // Log what we're about to write\n            const nvsKeys = Object.keys(nvsData[namespace]);\n            this.ui.log(`NVS data to write: ${nvsKeys.join(', ')}`, 'info');\n            nvsKeys.forEach(key => {\n                const value = nvsData[namespace][key];\n                this.ui.log(`  ${key} = ${value}`, 'info');\n            });\n\n            // Generate NVS partition binary\n            const generator = new NVSGenerator();\n            const partitionSize = parseInt(project.nvsPartition.size, 16);\n            const nvsBytes = generator.generate(nvsData, partitionSize);\n\n            // Convert NVS bytes to binary string\n            let nvsBinary = '';\n            for (let i = 0; i < nvsBytes.length; i++) {\n                nvsBinary += String.fromCharCode(nvsBytes[i]);\n            }\n\n            // Add NVS partition to file array\n            const nvsOffset = parseInt(project.nvsPartition.offset, 16);\n            fileArray.push({ data: nvsBinary, address: nvsOffset });\n\n            this.ui.log(`Generated NVS partition: ${nvsBytes.length} bytes at 0x${nvsOffset.toString(16)}`, 'success');\n            this.ui.log(`NVS contains ${nvsKeys.length} config values`, 'info');\n\n        } catch (nvsError) {\n            this.ui.log(`Warning: NVS generation failed: ${nvsError.message}`, 'warning');\n            this.ui.log('Continuing with firmware flash only (config will use defaults)', 'warning');\n        }\n    }\n\n    handleFlashError(error, project) {\n        this.ui.log('Flash error: ' + error.message, 'error');\n\n        // Provide detailed, user-friendly error messages\n        let errorTitle = 'Flash failed';\n        let errorDetails = '';\n\n        // Extract GitHub repo from firmware URL for links\n        const urlMatch = project.firmwareUrl.match(/github\\.com\\/([^\\/]+\\/[^\\/]+)/);\n        const repoPath = urlMatch ? urlMatch[1] : 'repository';\n        const releasesUrl = urlMatch ? `https://github.com/${repoPath}/releases` : '#';\n\n        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n            errorTitle = 'Cannot download firmware';\n            errorDetails = `No release found. <a href=\"${releasesUrl}\" target=\"_blank\" style=\"color: #2196f3; text-decoration: underline;\">Check releases</a> or verify internet connection.`;\n        } else if (error.message.includes('404') || error.message.includes('Not Found')) {\n            errorTitle = 'Firmware not found';\n            errorDetails = `File not available at <a href=\"${project.firmwareUrl}\" target=\"_blank\" style=\"color: #2196f3; text-decoration: underline;\">this URL</a>. <a href=\"${releasesUrl}\" target=\"_blank\" style=\"color: #2196f3; text-decoration: underline;\">View releases</a>.`;\n        } else if (error.message.includes('CORS')) {\n            errorTitle = 'Download blocked';\n            errorDetails = 'Browser blocked download due to CORS policy. Firmware must be on GitHub releases.';\n        } else if (error.message.includes('writeFlash') || error.message.includes('flash')) {\n            errorTitle = 'Flashing failed';\n            errorDetails = `${error.message}. Try reconnecting, holding BOOT button, or different USB cable.`;\n        } else if (error.message.includes('disconnect')) {\n            errorTitle = 'Device disconnected';\n            errorDetails = 'Device unplugged during flash. Check USB cable and try again.';\n        } else if (error.message.includes('NVS')) {\n            errorTitle = 'Configuration error';\n            errorDetails = `NVS generation failed: ${error.message}. Check your configuration values.`;\n        } else {\n            errorTitle = 'Flash failed';\n            errorDetails = `${error.message}. Try reconnecting and flashing again.`;\n        }\n\n        this.ui.updateStatus('error', errorTitle, errorDetails);\n    }\n}\n"],
  "mappings": "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",
  "names": ["FirmwareFlasher", "ui", "configManager", "project", "espStub", "options", "firmwareData", "response", "firmwareBytes", "firmwareBinary", "i", "fileArray", "idx", "written", "total", "percent", "error", "config", "nvsData", "namespace", "section", "field", "value", "nvsKeys", "key", "generator", "partitionSize", "nvsBytes", "nvsBinary", "nvsOffset", "nvsError", "errorTitle", "errorDetails", "urlMatch", "repoPath", "releasesUrl"]
}
