import{FlasherUI as p}from"./flasher-ui.js";import{ConfigManager as f}from"./config-manager.js";import{DeviceConnection as v}from"./device-connection.js";import{FirmwareFlasher as b}from"./firmware-flasher.js";class I{constructor(e){this.projects=e,this.ui=new p,this.configManager=new f,this.deviceConnection=new v(this.ui),this.firmwareFlasher=new b(this.ui,this.configManager),this.btnConnect=document.getElementById("btn-connect"),this.btnFlash=document.getElementById("btn-flash"),this.btnWriteConfig=document.getElementById("btn-write-config"),this.btnClearMonitor=document.getElementById("btn-clear-monitor"),this.selectedProject=this.projects["active-wing"],this.init()}init(){if(!("serial"in navigator)){document.getElementById("browser-check").style.display="block",this.ui.updateStatus("error","Browser not supported","Please use Chrome, Edge, or Opera"),this.ui.log("Web Serial API not available","error");return}if(!this.selectedProject){this.ui.log("ERROR: active-wing project not found. Available projects: "+Object.keys(this.projects).join(", "),"error"),this.ui.updateStatus("error","Project not found","Configuration error - check console");return}this.attachEventListeners(),this.loadProjectUI(),this.initializeUIElements(),this.ui.log("Flasher ready","success"),this.attemptAutoReconnect()}async attemptAutoReconnect(){try{const e=await navigator.serial.getPorts();if(e.length>0){const t=localStorage.getItem("lastSerialDeviceIndex"),n=t?parseInt(t):0,o=e[n]||e[0];this.ui.log("Attempting to reconnect to previous device...","info");try{const{chipType:c,macAddr:r}=await this.deviceConnection.connect(this.selectedProject,{port:o,skipChipCheck:!1});c&&(this.ui.log(`\u2713 Auto-reconnected to ${c}`,"success"),this.btnFlash.disabled=!1,this.btnFlash.style.display="block",this.btnWriteConfig.disabled=!1,this.btnWriteConfig.title="Write configuration to device NVS partition",this.btnConnect.style.display="none")}catch(c){console.log("Auto-reconnect failed:",c.message),this.btnConnect.disabled=!1,this.btnConnect.textContent="Connect Device"}}}catch(e){console.log("Auto-reconnect not available:",e.message)}}loadProjectUI(){const e=document.getElementById("project-details"),t=document.getElementById("config-container");this.ui.log("Loading project: "+this.selectedProject.name,"info"),console.log("Selected project:",this.selectedProject),console.log("Config sections:",this.selectedProject.configSections),console.log("Config container element:",t),this.ui.showProjectDetails(this.selectedProject),e.classList.add("active"),this.ui.log("Rendering config fields...","info"),this.configManager.renderConfigFields(this.selectedProject),console.log("Config container after render:",t.innerHTML.substring(0,200)),this.btnConnect.disabled=!1,this.btnConnect.textContent="Connect Device",this.btnWriteConfig.title="Connect device first",this.ui.updateStatus("waiting","Configure Settings","Fill in configuration, then connect your device"),this.ui.log("UI loaded. Connect button enabled.","success")}attachEventListeners(){this.btnConnect.addEventListener("click",()=>this.handleConnect()),this.btnFlash.addEventListener("click",()=>this.handleFlash()),this.btnWriteConfig.addEventListener("click",()=>this.handleWriteConfig()),this.btnClearMonitor.addEventListener("click",()=>this.ui.clearLog());const e=document.getElementById("dev-mode-toggle");e&&e.addEventListener("click",()=>{const i=document.getElementById("dev-options-panel"),a=document.getElementById("dev-panel-backdrop"),s=document.getElementById("dev-mode-toggle");i?.classList.toggle("active"),a?.classList.toggle("active"),s?.classList.toggle("active"),document.body.classList.toggle("dev-panel-open")});const t=document.getElementById("dev-options-close");t&&t.addEventListener("click",()=>{const i=document.getElementById("dev-options-panel"),a=document.getElementById("dev-panel-backdrop"),s=document.getElementById("dev-mode-toggle");i?.classList.remove("active"),a?.classList.remove("active"),s?.classList.remove("active"),document.body.classList.remove("dev-panel-open")});const n=document.getElementById("dev-panel-backdrop");n&&n.addEventListener("click",()=>{const i=document.getElementById("dev-options-panel"),a=document.getElementById("dev-panel-backdrop"),s=document.getElementById("dev-mode-toggle");i?.classList.remove("active"),a?.classList.remove("active"),s?.classList.remove("active"),document.body.classList.remove("dev-panel-open")}),document.addEventListener("keydown",i=>{if(i.key==="Escape"){const a=document.getElementById("dev-options-panel"),s=document.getElementById("dev-panel-backdrop"),l=document.getElementById("dev-mode-toggle");a?.classList.contains("active")&&(a?.classList.remove("active"),s?.classList.remove("active"),l?.classList.remove("active"),document.body.classList.remove("dev-panel-open"))}});const o=document.getElementById("btn-export-log");o&&o.addEventListener("click",()=>this.exportLog()),document.querySelectorAll(".dev-tab").forEach(i=>{i.addEventListener("click",()=>this.handleDevTabClick(i))}),document.querySelectorAll('input[name="firmware-source"]').forEach(i=>{i.addEventListener("change",a=>this.handleFirmwareSourceChange(a))});const c=document.getElementById("dev-custom-file");c&&c.addEventListener("change",i=>{this.handleCustomFileUpload(i)});const r=document.getElementById("troubleshooting-toggle");r&&r.addEventListener("click",()=>{this.toggleTroubleshooting()});const d=document.getElementById("about-link");d&&d.addEventListener("click",i=>{i.preventDefault(),this.openAboutPanel()});const g=document.getElementById("about-close");g&&g.addEventListener("click",()=>{this.closeAboutPanel()});const u=document.getElementById("about-backdrop");u&&u.addEventListener("click",()=>{this.closeAboutPanel()})}async handleConnect(){if(this.selectedProject)try{const t={skipChipCheck:document.getElementById("dev-skip-chip-check")?.checked||!1},{chipType:n,macAddr:o}=await this.deviceConnection.connect(this.selectedProject,t);this.btnConnect.style.display="none",this.btnFlash.style.display="block",this.btnFlash.disabled=!1,this.btnWriteConfig.disabled=!1,this.btnWriteConfig.title="Write configuration to device NVS partition"}catch(e){console.error("Connection failed:",e)}}async handleFlash(){if(this.selectedProject)try{this.btnFlash.disabled=!0;const e=this.deviceConnection.getESPStub();if(!e)throw new Error("Device not connected");const t=document.querySelector('input[name="firmware-source"]:checked')?.value||"release",n={};if(t==="custom"){const o=document.getElementById("dev-custom-file");if(o.files.length>0)n.customFirmware=o.files[0];else{this.ui.log("No custom firmware file selected","error"),this.ui.updateStatus("error","No file selected","Please select a .bin file in Developer Options"),this.btnFlash.disabled=!1;return}}await this.firmwareFlasher.flash(this.selectedProject,e,n),this.btnFlash.style.display="none",this.btnFlash.textContent="Flash Complete"}catch{this.btnFlash.disabled=!1,this.btnFlash.textContent="Retry Flash"}}async handleWriteConfig(){if(this.selectedProject){if(!this.deviceConnection.getIsConnected()){this.ui.log("Please connect to device first","warning"),this.ui.updateStatus("waiting","Not connected",'Click "Connect Device" first');return}if(!this.selectedProject.nvsPartition){this.ui.log("This project does not have NVS configuration","warning");return}try{this.btnWriteConfig.disabled=!0,this.btnWriteConfig.textContent="Writing...",this.ui.updateStatus("flashing","Writing configuration","Generating NVS partition..."),this.ui.log("Writing configuration to device...","info");const e=this.deviceConnection.getESPStub();if(!e)throw new Error("Device not connected");const t=this.configManager.getConfig(),n=this.selectedProject.nvsPartition.namespace||"config",o={};o[n]={},this.selectedProject.configSections.forEach(s=>{s.fields.forEach(l=>{if(l.nvsKey){const h=t[s.id]?.[l.id];h!==void 0&&h!==""&&(o[n][l.nvsKey]=h)}})});const c=Object.keys(o[n]);this.ui.log(`NVS data to write: ${c.join(", ")}`,"info"),c.forEach(s=>{const l=o[n][s];this.ui.log(`  ${s} = ${l}`,"info")});const r=new NVSGenerator,d=parseInt(this.selectedProject.nvsPartition.size,16),g=r.generate(o,d);let u="";for(let s=0;s<g.length;s++)u+=String.fromCharCode(g[s]);this.ui.log(`Generated NVS partition: ${g.length} bytes`,"info");const i=parseInt(this.selectedProject.nvsPartition.offset,16),a=[{data:u,address:i}];this.ui.updateStatus("flashing","Writing to flash...","Do not disconnect"),this.ui.showProgress(),await e.writeFlash({fileArray:a,flashSize:"keep",compress:!0,reportProgress:(s,l,h)=>{const m=Math.round(l/h*100);this.ui.updateProgress(m,l,h)}}),this.ui.updateStatus("success","Configuration written!","Config updated on device"),this.ui.log(`\u2713 Wrote ${c.length} configuration values to device`,"success"),this.btnWriteConfig.style.display="none"}catch(e){this.ui.log(`Failed to write configuration: ${e.message}`,"error"),this.ui.updateStatus("error","Write failed",e.message),this.btnWriteConfig.disabled=!1,this.btnWriteConfig.textContent="Write Config"}}}exportLog(){const t=document.getElementById("serial-monitor").querySelectorAll(".serial-line"),n=Array.from(t).map(d=>d.textContent).join(`
`),o=new Blob([n],{type:"text/plain"}),c=URL.createObjectURL(o),r=document.createElement("a");r.href=c,r.download=`flasher-log-${new Date().toISOString().replace(/[:.]/g,"-")}.txt`,r.click(),URL.revokeObjectURL(c),this.ui.log("Log exported successfully","success")}initializeUIElements(){}handleDevTabClick(e){const t=e.dataset.tab;document.querySelectorAll(".dev-tab").forEach(n=>{n.classList.remove("active")}),e.classList.add("active"),document.querySelectorAll(".dev-tab-content").forEach(n=>{n.classList.remove("active")}),document.querySelector(`.dev-tab-content[data-tab="${t}"]`).classList.add("active")}handleFirmwareSourceChange(e){e.target.value==="release"?(document.getElementById("release-options").style.display="block",document.getElementById("custom-options").style.display="none"):(document.getElementById("release-options").style.display="none",document.getElementById("custom-options").style.display="block")}handleCustomFileUpload(e){const t=e.target.files[0],n=document.getElementById("custom-file-info");if(t){const o=(t.size/1024/1024).toFixed(2);n.textContent=`${t.name} (${o} MB)`}else n.textContent=""}toggleTroubleshooting(){const e=document.getElementById("troubleshooting-toggle"),t=document.getElementById("troubleshooting-content");e.classList.toggle("collapsed"),t.classList.toggle("active")}openAboutPanel(){const e=document.getElementById("about-panel"),t=document.getElementById("about-backdrop");e.classList.add("active"),t.classList.add("active"),document.body.classList.add("dev-panel-open")}closeAboutPanel(){const e=document.getElementById("about-panel"),t=document.getElementById("about-backdrop");e.classList.remove("active"),t.classList.remove("active"),document.body.classList.remove("dev-panel-open")}}export{I as FlasherApp};
//# sourceMappingURL=main-app.js.map
