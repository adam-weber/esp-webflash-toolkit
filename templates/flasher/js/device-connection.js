class C{constructor(e){this.ui=e,this.transport=null,this.espStub=null,this.isConnected=!1}getChipOverrides(){const e=localStorage.getItem("chip-overrides");return e?JSON.parse(e):{}}saveChipOverride(e,n){const i=this.getChipOverrides();i[e]=n,localStorage.setItem("chip-overrides",JSON.stringify(i))}clearChipOverride(e){const n=this.getChipOverrides();delete n[e],localStorage.setItem("chip-overrides",JSON.stringify(n))}async showChipMismatchDialog(e,n){return new Promise(i=>{const s=document.getElementById("status-box"),d=s.innerHTML;s.className="status-box waiting",s.innerHTML=`
                <div class="status-text">Chip Mismatch</div>
                <div class="status-subtext" style="margin-bottom: 12px;">Expected ${e}, found ${n}</div>
                <div style="display: flex; gap: 8px;">
                    <button id="chip-btn-cancel" class="btn btn-primary" style="flex: 1; font-size: 13px; padding: 8px 12px;">
                        Cancel
                    </button>
                    <button id="chip-btn-once" class="btn btn-secondary" style="flex: 1; font-size: 13px; padding: 8px 12px;">
                        Continue
                    </button>
                    <button id="chip-btn-always" class="btn btn-secondary" style="flex: 1; font-size: 13px; padding: 8px 12px;">
                        Always Allow
                    </button>
                </div>
            `;const c=()=>{s.innerHTML=d};document.getElementById("chip-btn-cancel").addEventListener("click",()=>{c(),i("cancel")}),document.getElementById("chip-btn-once").addEventListener("click",()=>{c(),i("once")}),document.getElementById("chip-btn-always").addEventListener("click",()=>{c(),i("always")})})}async disconnect(){if(this.transport)try{await this.transport.disconnect(),this.ui.log("Disconnected from device","info")}catch{}this.transport=null,this.espStub=null,this.isConnected=!1}async connect(e,n={}){(this.transport||this.isConnected)&&(this.ui.log("Cleaning up previous connection...","warning"),await this.disconnect());const i=n.skipChipCheck||!1;try{let s=n.port;if(!s){this.ui.log("Initiating connection to ESP32...","info"),this.ui.updateStatus("waiting","Connecting...","Select your device from the prompt"),s=await navigator.serial.requestPort();const a=(await navigator.serial.getPorts()).indexOf(s);a!==-1&&localStorage.setItem("lastSerialDeviceIndex",a.toString())}this.ui.log("Opening serial port...","info"),this.ui.updateStatus("waiting","Opening port...","Establishing connection");const{Transport:d,ESPLoader:c}=await import("https://unpkg.com/esptool-js@0.4.5/bundle.js");this.transport=new d(s,!0),this.ui.log("Initializing esptool...","info"),this.ui.updateStatus("waiting","Initializing...","Detecting chip type"),this.espStub=new c({transport:this.transport,baudrate:115200,terminal:{clean:()=>{},writeLine:t=>this.ui.log(t,"info"),write:t=>this.ui.log(t,"info")}});const h=new Promise((t,a)=>{setTimeout(()=>{a(new Error("Connection timeout - device not responding. Make sure you selected the correct serial port (not Bluetooth) and try holding the BOOT button."))},15e3)}),o=await Promise.race([this.espStub.main(),h]);this.ui.log("Chip: "+o,"info");let r=null;if(this.espStub.chip&&this.espStub.chip.macAddr&&(r=this.espStub.chip.macAddr(),this.ui.log("MAC Address: "+r,"info"),this.ui.updateChipInfo(o,r)),e.chip&&o){const t=e.chip.toUpperCase(),a=o.toUpperCase(),p=!a.includes(t.replace("ESP32-","")),g=this.getChipOverrides()[a]===t;if(p)if(i)this.ui.log(`Chip validation skipped (dev option): Expected ${t}, detected ${o}`,"warning");else if(g)this.ui.log(`Chip mismatch allowed (saved preference): Expected ${t}, detected ${o}`,"warning");else{this.ui.log(`Chip mismatch: Expected ${t}, but detected ${o}`,"warning"),this.ui.updateStatus("waiting","Chip mismatch detected",`Expected ${t} but found ${o}`);const l=await this.showChipMismatchDialog(t,o);if(l==="cancel"){this.ui.log("Connection cancelled by user","info"),this.ui.updateStatus("waiting","Connection cancelled","Select a device and try again"),await this.disconnect();const u=new Error("Chip mismatch - user cancelled");throw u.isChipMismatch=!0,u}else l==="always"&&(this.saveChipOverride(a,t),this.ui.log(`Saved override: ${a} \u2192 ${t}`,"success"));this.ui.log(`Proceeding with ${o} (user override)`,"warning")}}return this.isConnected=!0,this.ui.updateStatus("connected","Device connected","Ready to flash firmware"),this.ui.log(`Connected to ${o}`,"success"),{chipType:o,macAddr:r}}catch(s){throw await this.disconnect(),s.isChipMismatch||this.handleConnectionError(s),s}}handleConnectionError(e){if(e.message&&e.message.includes("port is already open")){this.ui.log("Port is already open - please refresh the page","error"),this.ui.updateStatus("error","Port already open","Refresh the page (Ctrl+R or Cmd+R) and try again");return}if(e.message&&(e.message.includes("Transport is not defined")||e.message.includes("ESPLoader is not defined"))){this.ui.log("ESPTool library failed to load","error"),this.ui.updateStatus("error","Library loading error","Please refresh the page and ensure you have internet connection");return}if(e.message&&e.message.includes("No port selected")){this.ui.log("Port selection cancelled by user","warning"),this.ui.updateStatus("waiting","Connection cancelled",'Click "Connect Device" to try again');return}if(e.message&&(e.message.includes("permission")||e.message.includes("access denied"))){this.ui.log("Permission denied: "+e.message,"error"),this.ui.updateStatus("error","Permission denied","Close other programs using the serial port and try again");return}if(e.message&&(e.message.includes("timeout")||e.message.includes("Failed to connect")||e.message.includes("not responding"))){this.ui.log("Connection timeout: "+e.message,"error"),this.ui.updateStatus("error","Device not responding","Wrong port selected or device not in download mode. Hold BOOT button and try again.");return}if(e.message&&e.message.includes("chip")){this.ui.log("Wrong device type: "+e.message,"error"),this.ui.updateStatus("error","Wrong device detected","Make sure you selected the correct ESP32 device");return}if(e.message&&(e.message.includes("getInfo")||e.message.includes("main")||e.message.includes("Cannot read properties"))){this.ui.log("ESPTool communication error: "+e.message,"error"),this.ui.updateStatus("error","Device communication failed","Try holding BOOT button while connecting, or refresh the page");return}this.ui.log("Connection error: "+e.message,"error"),this.ui.updateStatus("error","Connection failed","Check cable connection and try again")}getESPStub(){return this.espStub}getIsConnected(){return this.isConnected}async readFlash(e,n){if(!this.espStub)throw new Error("Device not connected");this.ui.log(`Reading ${n} bytes from flash at offset 0x${e.toString(16)}...`,"info");try{const i=await this.espStub.readFlash(e,n);return this.ui.log(`\u2713 Read ${i.length} bytes successfully`,"success"),new Uint8Array(i)}catch(i){throw this.ui.log(`Failed to read flash: ${i.message}`,"error"),i}}}export{C as DeviceConnection};
//# sourceMappingURL=device-connection.js.map
