class m{constructor(e,r){this.ui=e,this.configManager=r}async flash(e,r,i={}){try{this.ui.log("Starting flash process...","info"),this.ui.showProgress();let s;if(i.customFirmware)this.ui.updateStatus("flashing","Using custom firmware...",`File: ${i.customFirmware.name}`),this.ui.log("Using custom firmware file: "+i.customFirmware.name,"warning"),s=await i.customFirmware.arrayBuffer(),this.ui.log(`Loaded ${(s.byteLength/1024).toFixed(1)} KB from custom file`,"success");else{this.ui.updateStatus("flashing","Downloading firmware...","Please wait"),this.ui.log("Firmware URL: "+e.firmwareUrl,"info");const t=await fetch(e.firmwareUrl);if(!t.ok)throw new Error(`Failed to download firmware: ${t.status} ${t.statusText}`);s=await t.arrayBuffer(),this.ui.log(`Downloaded ${(s.byteLength/1024).toFixed(1)} KB`,"success")}const a=new Uint8Array(s);let o="";for(let t=0;t<a.length;t++)o+=String.fromCharCode(a[t]);const l=[{data:o,address:0}];return e.configSections&&e.nvsPartition&&await this.generateAndAddNVS(e,l),this.ui.updateStatus("flashing","Writing to flash...","Do not disconnect"),await r.writeFlash({fileArray:l,flashSize:"keep",compress:!0,reportProgress:(t,c,u)=>{const g=Math.round(c/u*100);this.ui.updateProgress(g,c,u)}}),this.ui.updateStatus("success","Flash complete!","Device ready to use"),this.ui.log("Flash completed successfully","success"),!0}catch(s){throw this.handleFlashError(s,e),s}}async generateAndAddNVS(e,r){this.ui.updateStatus("flashing","Generating NVS config...","Please wait"),this.ui.log("Generating NVS partition from configuration...","info");try{const i=this.configManager.getConfig(),s={},a=e.nvsPartition.namespace||"config";s[a]={},e.configSections.forEach(n=>{n.fields.forEach(f=>{if(f.nvsKey){const h=i[n.id]?.[f.id];h!==void 0&&h!==""&&(s[a][f.nvsKey]=h)}})});const o=Object.keys(s[a]);this.ui.log(`NVS data to write: ${o.join(", ")}`,"info"),o.forEach(n=>{const f=s[a][n];this.ui.log(`  ${n} = ${f}`,"info")});const l=new NVSGenerator,t=parseInt(e.nvsPartition.size,16),c=l.generate(s,t);let u="";for(let n=0;n<c.length;n++)u+=String.fromCharCode(c[n]);const g=parseInt(e.nvsPartition.offset,16);r.push({data:u,address:g}),this.ui.log(`Generated NVS partition: ${c.length} bytes at 0x${g.toString(16)}`,"success"),this.ui.log(`NVS contains ${o.length} config values`,"info")}catch(i){this.ui.log(`Warning: NVS generation failed: ${i.message}`,"warning"),this.ui.log("Continuing with firmware flash only (config will use defaults)","warning")}}handleFlashError(e,r){this.ui.log("Flash error: "+e.message,"error");let i="Flash failed",s="";const a=r.firmwareUrl.match(/github\.com\/([^\/]+\/[^\/]+)/),o=a?a[1]:"repository",l=a?`https://github.com/${o}/releases`:"#";e.message.includes("Failed to fetch")||e.message.includes("NetworkError")?(i="Cannot download firmware",s=`No release found. <a href="${l}" target="_blank" style="color: #2196f3; text-decoration: underline;">Check releases</a> or verify internet connection.`):e.message.includes("404")||e.message.includes("Not Found")?(i="Firmware not found",s=`File not available at <a href="${r.firmwareUrl}" target="_blank" style="color: #2196f3; text-decoration: underline;">this URL</a>. <a href="${l}" target="_blank" style="color: #2196f3; text-decoration: underline;">View releases</a>.`):e.message.includes("CORS")?(i="Download blocked",s="Browser blocked download due to CORS policy. Firmware must be on GitHub releases."):e.message.includes("writeFlash")||e.message.includes("flash")?(i="Flashing failed",s=`${e.message}. Try reconnecting, holding BOOT button, or different USB cable.`):e.message.includes("disconnect")?(i="Device disconnected",s="Device unplugged during flash. Check USB cable and try again."):e.message.includes("NVS")?(i="Configuration error",s=`NVS generation failed: ${e.message}. Check your configuration values.`):(i="Flash failed",s=`${e.message}. Try reconnecting and flashing again.`),this.ui.updateStatus("error",i,s)}}export{m as FirmwareFlasher};
//# sourceMappingURL=firmware-flasher.js.map
