{
  "version": 3,
  "sources": ["../src/config-manager.js"],
  "sourcesContent": ["/**\n * Configuration Management for ESP32 Web Flasher\n * Handles loading, saving, and rendering configuration forms\n */\n\nexport class ConfigManager {\n    constructor() {\n        this.config = this.loadConfig();\n    }\n\n    loadConfig() {\n        const saved = localStorage.getItem('active-wing-config');\n        return saved ? JSON.parse(saved) : {};\n    }\n\n    saveConfig() {\n        localStorage.setItem('active-wing-config', JSON.stringify(this.config));\n    }\n\n    clearConfig() {\n        this.config = {};\n        this.saveConfig();\n        this.loadConfigValues();\n    }\n\n    loadConfigValues() {\n        const inputs = document.querySelectorAll('[data-section][data-field]');\n        inputs.forEach(input => {\n            const section = input.dataset.section;\n            const field = input.dataset.field;\n            if (this.config[section] && this.config[section][field] !== undefined) {\n                input.value = this.config[section][field];\n            }\n        });\n    }\n\n    attachConfigListeners() {\n        const inputs = document.querySelectorAll('[data-section][data-field]');\n        inputs.forEach(input => {\n            input.addEventListener('input', () => {\n                const section = input.dataset.section;\n                const field = input.dataset.field;\n\n                if (!this.config[section]) this.config[section] = {};\n                this.config[section][field] = input.value;\n                this.saveConfig();\n            });\n        });\n    }\n\n    renderConfigFields(project) {\n        if (!project.configSections) {\n            document.getElementById('config-container').innerHTML =\n                '<div style=\"padding: 20px 0; text-align: center; color: #999; font-size: 13px;\">No configuration needed</div>';\n            return;\n        }\n\n        const container = document.getElementById('config-container');\n        container.innerHTML = '';\n\n        project.configSections.forEach(section => {\n            const sectionDiv = document.createElement('div');\n            sectionDiv.className = 'config-group';\n\n            let sectionHTML = `<h3>${section.title}</h3>`;\n            if (section.description) {\n                sectionHTML += `<p class=\"help-text\" style=\"margin-bottom: 12px;\">${section.description}</p>`;\n            }\n\n            section.fields.forEach(field => {\n                const fieldId = `${section.id}-${field.id}`;\n                sectionHTML += `\n                    <div class=\"form-group\">\n                        <label for=\"${fieldId}\">${field.label}${field.required ? ' <span style=\"color: #ff3b30;\">*</span>' : ' <span style=\"color: #86868b; font-weight: 400;\">(optional)</span>'}</label>\n                        <input\n                            type=\"${field.type || 'text'}\"\n                            id=\"${fieldId}\"\n                            placeholder=\"${field.placeholder || ''}\"\n                            ${field.default ? `value=\"${field.default}\"` : ''}\n                            ${field.required ? 'required' : ''}\n                            aria-required=\"${field.required ? 'true' : 'false'}\"\n                            aria-describedby=\"${field.help ? fieldId + '-help' : ''}\"\n                            data-section=\"${section.id}\"\n                            data-field=\"${field.id}\">\n                        ${field.help ? `<span class=\"help-text\" id=\"${fieldId}-help\">${field.help}</span>` : ''}\n                    </div>\n                `;\n            });\n\n            sectionDiv.innerHTML = sectionHTML;\n            container.appendChild(sectionDiv);\n        });\n\n        this.loadConfigValues();\n        this.attachConfigListeners();\n    }\n\n    getConfig() {\n        return this.config;\n    }\n\n    /**\n     * Populate form fields from NVS data read from device\n     * @param {Object} nvsData - Parsed NVS data (nvsKey -> value mapping)\n     * @param {Object} project - Project configuration with field definitions\n     */\n    populateFromNVS(nvsData, project) {\n        if (!project.configSections) return;\n\n        // Clear current config\n        this.config = {};\n\n        // Map NVS keys back to form fields\n        project.configSections.forEach(section => {\n            section.fields.forEach(field => {\n                const nvsKey = field.nvsKey || `${section.id}_${field.id}`;\n\n                if (nvsData[nvsKey] !== undefined) {\n                    // Store in config\n                    if (!this.config[section.id]) {\n                        this.config[section.id] = {};\n                    }\n                    this.config[section.id][field.id] = nvsData[nvsKey];\n\n                    // Update form field\n                    const fieldId = `${section.id}-${field.id}`;\n                    const inputElement = document.getElementById(fieldId);\n                    if (inputElement) {\n                        inputElement.value = nvsData[nvsKey];\n                    }\n                }\n            });\n        });\n\n        // Save to localStorage\n        this.saveConfig();\n    }\n}\n"],
  "mappings": "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",
  "names": ["ConfigManager", "saved", "input", "section", "field", "project", "container", "sectionDiv", "sectionHTML", "fieldId", "nvsData", "nvsKey", "inputElement"]
}
