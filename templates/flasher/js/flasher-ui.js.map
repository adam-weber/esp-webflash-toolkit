{
  "version": 3,
  "sources": ["../src/flasher-ui.js"],
  "sourcesContent": ["/**\n * UI Management for ESP32 Web Flasher\n * Handles status updates, progress, logging, and visual feedback\n */\n\nexport class FlasherUI {\n    constructor() {\n        this.statusBox = document.getElementById('status-box');\n        this.progressContainer = document.getElementById('progress-container');\n        this.progressFill = document.getElementById('progress-fill');\n        this.progressPercent = document.getElementById('progress-percent');\n        this.progressTime = document.getElementById('progress-time');\n        this.serialMonitor = document.getElementById('serial-monitor');\n        this.chipInfo = document.getElementById('chip-info');\n        this.flashStartTime = null;\n        this.lastDisplayedTime = null;\n        this.lastUpdateTime = null;\n        this.lastDisplayedPercent = 0;\n        this.targetPercent = 0;\n        this.animationFrame = null;\n    }\n\n    updateStatus(state, text, subtext) {\n        this.statusBox.className = 'status-box ' + state;\n        this.statusBox.innerHTML = `\n            <div class=\"status-text\">${text}</div>\n            <div class=\"status-subtext\">${subtext}</div>\n        `;\n    }\n\n    updateProgress(percent, written, total) {\n        // Set target percentage for smooth animation\n        this.targetPercent = percent;\n\n        // Start animation if not already running\n        if (!this.animationFrame) {\n            this.animateProgress();\n        }\n\n        if (this.flashStartTime && percent > 0 && percent < 100) {\n            const now = Date.now();\n            const elapsed = (now - this.flashStartTime) / 1000;\n            const totalTime = (elapsed / percent) * 100;\n            const calculated = Math.max(0, Math.round(totalTime - elapsed));\n\n            // Update time display\n            if (this.lastUpdateTime === null) {\n                // First update\n                this.lastDisplayedTime = calculated;\n                this.lastUpdateTime = now;\n                this.progressTime.textContent = `~${this.lastDisplayedTime}s remaining`;\n            } else {\n                const timeSinceLastUpdate = now - this.lastUpdateTime;\n\n                // Update display every 100ms to keep smooth\n                if (timeSinceLastUpdate >= 100) {\n                    // If calculated time is much less, speed up countdown\n                    if (calculated < this.lastDisplayedTime - 5) {\n                        // Fast catch-up: decrease by 2-3 seconds\n                        const gap = this.lastDisplayedTime - calculated;\n                        const decrement = Math.min(Math.ceil(gap / 5), 3);\n                        this.lastDisplayedTime = Math.max(calculated, this.lastDisplayedTime - decrement);\n                    } else {\n                        // Normal countdown based on actual time elapsed\n                        const secondsPassed = timeSinceLastUpdate / 1000;\n                        this.lastDisplayedTime = Math.max(calculated, this.lastDisplayedTime - secondsPassed);\n                    }\n\n                    this.lastUpdateTime = now;\n                    this.progressTime.textContent = `~${Math.round(this.lastDisplayedTime)}s remaining`;\n                }\n            }\n        } else if (percent >= 100) {\n            // Rapidly count down to 0 if we still have time showing\n            if (this.lastDisplayedTime && this.lastDisplayedTime > 0) {\n                this.countdownToZero();\n            } else {\n                this.progressTime.textContent = 'Complete';\n                this.lastDisplayedTime = null;\n            }\n        }\n    }\n\n    countdownToZero() {\n        if (this.lastDisplayedTime > 0) {\n            this.lastDisplayedTime = Math.max(0, this.lastDisplayedTime - 1);\n            this.progressTime.textContent = `~${this.lastDisplayedTime}s remaining`;\n            setTimeout(() => this.countdownToZero(), 50); // Count down every 50ms\n        } else {\n            this.progressTime.textContent = 'Complete';\n        }\n    }\n\n    animateProgress() {\n        // Smoothly interpolate towards target percentage\n        const diff = this.targetPercent - this.lastDisplayedPercent;\n\n        if (Math.abs(diff) > 0.1) {\n            // Move 10% of the way to target each frame (adjust for smoothness)\n            this.lastDisplayedPercent += diff * 0.1;\n\n            this.progressFill.style.width = this.lastDisplayedPercent + '%';\n            this.progressPercent.textContent = Math.round(this.lastDisplayedPercent) + '%';\n\n            this.animationFrame = requestAnimationFrame(() => this.animateProgress());\n        } else {\n            // Snap to target when close enough\n            this.lastDisplayedPercent = this.targetPercent;\n            this.progressFill.style.width = this.targetPercent + '%';\n            this.progressPercent.textContent = Math.round(this.targetPercent) + '%';\n            this.animationFrame = null;\n        }\n    }\n\n    showProgress() {\n        this.flashStartTime = Date.now();\n        this.lastDisplayedTime = null;\n        this.lastUpdateTime = null;\n        this.lastDisplayedPercent = 0;\n        this.targetPercent = 0;\n        this.progressContainer.classList.add('active');\n    }\n\n    hideProgress() {\n        this.progressContainer.classList.remove('active');\n        this.flashStartTime = null;\n        this.lastDisplayedTime = null;\n        this.lastUpdateTime = null;\n        if (this.animationFrame) {\n            cancelAnimationFrame(this.animationFrame);\n            this.animationFrame = null;\n        }\n        this.lastDisplayedPercent = 0;\n        this.targetPercent = 0;\n    }\n\n    log(message, type = 'info') {\n        const line = document.createElement('div');\n        line.className = 'serial-line ' + type;\n        line.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;\n        this.serialMonitor.appendChild(line);\n        this.serialMonitor.scrollTop = this.serialMonitor.scrollHeight;\n    }\n\n    clearLog() {\n        this.serialMonitor.innerHTML = '<div class=\"serial-line info\">Monitor cleared</div>';\n    }\n\n    updateChipInfo(chipType, macAddr) {\n        document.getElementById('chip-type').textContent = chipType;\n        document.getElementById('chip-mac').textContent = macAddr;\n        this.chipInfo.classList.add('active');\n    }\n\n    showProjectDetails(project) {\n        const hardware = project.hardware.map(h => `<li>${h}</li>`).join('');\n        const software = project.software.map(s => `<li>${s}</li>`).join('');\n\n        const docLink = project.documentation\n            ? `<a href=\"${project.documentation.url}\" target=\"_blank\" class=\"doc-link\">\n                 <span>${project.documentation.label}</span>\n                 <span class=\"external-icon\">\u2197</span>\n               </a>`\n            : '';\n\n        document.getElementById('project-details').innerHTML = `\n            <p style=\"margin-bottom: 24px;\">${project.description}</p>\n\n            ${docLink}\n\n            <div class=\"section section-bg\" style=\"margin-top: 32px;\">\n                <h3>Hardware</h3>\n                <ul class=\"requirement-list\">\n                    ${hardware}\n                </ul>\n            </div>\n\n            <div class=\"section section-bg\">\n                <h3>Steps</h3>\n                <ul class=\"instruction-list\">\n                    <li data-step=\"1\">Configure WiFi, MQTT, and TCP settings in the center panel</li>\n                    <li data-step=\"2\">Connect your ESP32 device via USB</li>\n                    <li data-step=\"3\">Click \"Connect Device\" and select the serial port</li>\n                    <li data-step=\"4\">Click \"Flash Firmware\" to begin</li>\n                    <li data-step=\"5\">Wait for flashing to complete (do not disconnect)</li>\n                </ul>\n            </div>\n        `;\n    }\n}\n"],
  "mappings": "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",
  "names": ["FlasherUI", "state", "text", "subtext", "percent", "written", "total", "now", "elapsed", "totalTime", "calculated", "timeSinceLastUpdate", "gap", "decrement", "secondsPassed", "diff", "message", "type", "line", "chipType", "macAddr", "project", "hardware", "h", "software", "s", "docLink"]
}
