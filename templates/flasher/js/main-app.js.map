{
  "version": 3,
  "sources": ["../src/main-app.js"],
  "sourcesContent": ["/**\n * Main Application for ESP32 Web Flasher\n * Coordinates UI, configuration, device connection, and firmware flashing\n */\n\nimport { FlasherUI } from './flasher-ui.js';\nimport { ConfigManager } from './config-manager.js';\nimport { DeviceConnection } from './device-connection.js';\nimport { FirmwareFlasher } from './firmware-flasher.js';\n\nexport class FlasherApp {\n    constructor(projects) {\n        this.projects = projects;\n\n        // Initialize components\n        this.ui = new FlasherUI();\n        this.configManager = new ConfigManager();\n        this.deviceConnection = new DeviceConnection(this.ui);\n        this.firmwareFlasher = new FirmwareFlasher(this.ui, this.configManager);\n\n        // DOM elements\n        this.btnConnect = document.getElementById('btn-connect');\n        this.btnFlash = document.getElementById('btn-flash');\n        this.btnWriteConfig = document.getElementById('btn-write-config');\n        this.btnClearMonitor = document.getElementById('btn-clear-monitor');\n\n        // State - auto-select the only project (active-wing)\n        this.selectedProject = this.projects['active-wing'];\n\n        // Initialize\n        this.init();\n    }\n\n    init() {\n        // Check browser support\n        if (!('serial' in navigator)) {\n            document.getElementById('browser-check').style.display = 'block';\n            this.ui.updateStatus('error', 'Browser not supported', 'Please use Chrome, Edge, or Opera');\n            this.ui.log('Web Serial API not available', 'error');\n            return;\n        }\n\n        // Check if project loaded\n        if (!this.selectedProject) {\n            this.ui.log('ERROR: active-wing project not found. Available projects: ' + Object.keys(this.projects).join(', '), 'error');\n            this.ui.updateStatus('error', 'Project not found', 'Configuration error - check console');\n            return;\n        }\n\n        // Attach event listeners\n        this.attachEventListeners();\n\n        // Auto-load the active-wing project UI\n        this.loadProjectUI();\n\n        // Initialize UI elements\n        this.initializeUIElements();\n\n        this.ui.log('Flasher ready', 'success');\n\n        // Attempt auto-reconnect to previously connected device\n        this.attemptAutoReconnect();\n    }\n\n    async attemptAutoReconnect() {\n        try {\n            // Get list of previously approved devices\n            const ports = await navigator.serial.getPorts();\n\n            if (ports.length > 0) {\n                // Get the last used device from localStorage\n                const lastDeviceIndex = localStorage.getItem('lastSerialDeviceIndex');\n                const deviceIndex = lastDeviceIndex ? parseInt(lastDeviceIndex) : 0;\n                const port = ports[deviceIndex] || ports[0];\n\n                this.ui.log('Attempting to reconnect to previous device...', 'info');\n\n                try {\n                    // Connect using the device connection handler, passing the port\n                    const { chipType, macAddr } = await this.deviceConnection.connect(this.selectedProject, {\n                        port: port,\n                        skipChipCheck: false\n                    });\n\n                    if (chipType) {\n                        this.ui.log(`\u2713 Auto-reconnected to ${chipType}`, 'success');\n\n                        // Enable flash and write config buttons\n                        this.btnFlash.disabled = false;\n                        this.btnFlash.style.display = 'block';\n                        this.btnWriteConfig.disabled = false;\n                        this.btnWriteConfig.title = 'Write configuration to device NVS partition';\n                        this.btnConnect.style.display = 'none';\n                    }\n                } catch (connectError) {\n                    // Auto-reconnect failed - fail silently\n                    console.log('Auto-reconnect failed:', connectError.message);\n                    // Reset UI state\n                    this.btnConnect.disabled = false;\n                    this.btnConnect.textContent = 'Connect Device';\n                }\n            }\n        } catch (error) {\n            // Auto-reconnect not available - fail silently\n            console.log('Auto-reconnect not available:', error.message);\n        }\n    }\n\n    loadProjectUI() {\n        const projectDetails = document.getElementById('project-details');\n        const configContainer = document.getElementById('config-container');\n\n        this.ui.log('Loading project: ' + this.selectedProject.name, 'info');\n        console.log('Selected project:', this.selectedProject);\n        console.log('Config sections:', this.selectedProject.configSections);\n        console.log('Config container element:', configContainer);\n\n        // Show project details and render config\n        this.ui.showProjectDetails(this.selectedProject);\n        projectDetails.classList.add('active');\n\n        this.ui.log('Rendering config fields...', 'info');\n        this.configManager.renderConfigFields(this.selectedProject);\n\n        console.log('Config container after render:', configContainer.innerHTML.substring(0, 200));\n\n        this.btnConnect.disabled = false;\n        this.btnConnect.textContent = 'Connect Device';\n        this.btnWriteConfig.title = 'Connect device first';\n        this.ui.updateStatus('waiting', 'Configure Settings', 'Fill in configuration, then connect your device');\n\n        this.ui.log('UI loaded. Connect button enabled.', 'success');\n    }\n\n    attachEventListeners() {\n\n        // Connection\n        this.btnConnect.addEventListener('click', () => this.handleConnect());\n\n        // Flash\n        this.btnFlash.addEventListener('click', () => this.handleFlash());\n\n        // Write config\n        this.btnWriteConfig.addEventListener('click', () => this.handleWriteConfig());\n\n        // Clear console\n        this.btnClearMonitor.addEventListener('click', () => this.ui.clearLog());\n\n        // Developer options toggle (slide panel)\n        const devModeToggle = document.getElementById('dev-mode-toggle');\n        if (devModeToggle) {\n            devModeToggle.addEventListener('click', () => {\n                const panel = document.getElementById('dev-options-panel');\n                const backdrop = document.getElementById('dev-panel-backdrop');\n                const toggle = document.getElementById('dev-mode-toggle');\n                panel?.classList.toggle('active');\n                backdrop?.classList.toggle('active');\n                toggle?.classList.toggle('active');\n                document.body.classList.toggle('dev-panel-open');\n            });\n        }\n\n        // Developer options close button\n        const devOptionsClose = document.getElementById('dev-options-close');\n        if (devOptionsClose) {\n            devOptionsClose.addEventListener('click', () => {\n                const panel = document.getElementById('dev-options-panel');\n                const backdrop = document.getElementById('dev-panel-backdrop');\n                const toggle = document.getElementById('dev-mode-toggle');\n                panel?.classList.remove('active');\n                backdrop?.classList.remove('active');\n                toggle?.classList.remove('active');\n                document.body.classList.remove('dev-panel-open');\n            });\n        }\n\n        // Close panel when clicking backdrop\n        const devPanelBackdrop = document.getElementById('dev-panel-backdrop');\n        if (devPanelBackdrop) {\n            devPanelBackdrop.addEventListener('click', () => {\n                const panel = document.getElementById('dev-options-panel');\n                const backdrop = document.getElementById('dev-panel-backdrop');\n                const toggle = document.getElementById('dev-mode-toggle');\n                panel?.classList.remove('active');\n                backdrop?.classList.remove('active');\n                toggle?.classList.remove('active');\n                document.body.classList.remove('dev-panel-open');\n            });\n        }\n\n        // Close panel with Escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                const panel = document.getElementById('dev-options-panel');\n                const backdrop = document.getElementById('dev-panel-backdrop');\n                const toggle = document.getElementById('dev-mode-toggle');\n                if (panel?.classList.contains('active')) {\n                    panel?.classList.remove('active');\n                    backdrop?.classList.remove('active');\n                    toggle?.classList.remove('active');\n                    document.body.classList.remove('dev-panel-open');\n                }\n            }\n        });\n\n        // Export log button\n        const btnExportLog = document.getElementById('btn-export-log');\n        if (btnExportLog) {\n            btnExportLog.addEventListener('click', () => this.exportLog());\n        }\n\n        // Developer tabs\n        document.querySelectorAll('.dev-tab').forEach(tab => {\n            tab.addEventListener('click', () => this.handleDevTabClick(tab));\n        });\n\n        // Firmware source toggle\n        document.querySelectorAll('input[name=\"firmware-source\"]').forEach(radio => {\n            radio.addEventListener('change', (e) => this.handleFirmwareSourceChange(e));\n        });\n\n        // Custom file upload\n        const devCustomFile = document.getElementById('dev-custom-file');\n        if (devCustomFile) {\n            devCustomFile.addEventListener('change', (e) => {\n                this.handleCustomFileUpload(e);\n            });\n        }\n\n        // Troubleshooting toggle\n        const troubleshootingToggle = document.getElementById('troubleshooting-toggle');\n        if (troubleshootingToggle) {\n            troubleshootingToggle.addEventListener('click', () => {\n                this.toggleTroubleshooting();\n            });\n        }\n\n        // About panel\n        const aboutLink = document.getElementById('about-link');\n        if (aboutLink) {\n            aboutLink.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.openAboutPanel();\n            });\n        }\n\n        const aboutClose = document.getElementById('about-close');\n        if (aboutClose) {\n            aboutClose.addEventListener('click', () => {\n                this.closeAboutPanel();\n            });\n        }\n\n        const aboutBackdrop = document.getElementById('about-backdrop');\n        if (aboutBackdrop) {\n            aboutBackdrop.addEventListener('click', () => {\n                this.closeAboutPanel();\n            });\n        }\n    }\n\n    async handleConnect() {\n        if (!this.selectedProject) return;\n\n        try {\n            // Get developer options\n            const skipChipCheck = document.getElementById('dev-skip-chip-check')?.checked || false;\n\n            const options = {\n                skipChipCheck: skipChipCheck\n            };\n\n            const { chipType, macAddr } = await this.deviceConnection.connect(this.selectedProject, options);\n\n            // Connection successful\n            this.btnConnect.style.display = 'none';\n            this.btnFlash.style.display = 'block';\n            this.btnFlash.disabled = false;\n            this.btnWriteConfig.disabled = false;\n            this.btnWriteConfig.title = 'Write configuration to device NVS partition';\n\n        } catch (error) {\n            // Error already handled by DeviceConnection\n            console.error('Connection failed:', error);\n        }\n    }\n\n    async handleFlash() {\n        if (!this.selectedProject) return;\n\n        try {\n            this.btnFlash.disabled = true;\n\n            const espStub = this.deviceConnection.getESPStub();\n            if (!espStub) {\n                throw new Error('Device not connected');\n            }\n\n            // Get developer options\n            const firmwareSource = document.querySelector('input[name=\"firmware-source\"]:checked')?.value || 'release';\n            const options = {};\n\n            if (firmwareSource === 'custom') {\n                const fileInput = document.getElementById('dev-custom-file');\n                if (fileInput.files.length > 0) {\n                    options.customFirmware = fileInput.files[0];\n                } else {\n                    this.ui.log('No custom firmware file selected', 'error');\n                    this.ui.updateStatus('error', 'No file selected', 'Please select a .bin file in Developer Options');\n                    this.btnFlash.disabled = false;\n                    return;\n                }\n            }\n\n            await this.firmwareFlasher.flash(this.selectedProject, espStub, options);\n\n            // Flash successful\n            this.btnFlash.style.display = 'none';\n            this.btnFlash.textContent = 'Flash Complete';\n\n        } catch (error) {\n            // Error already handled by FirmwareFlasher\n            this.btnFlash.disabled = false;\n            this.btnFlash.textContent = 'Retry Flash';\n        }\n    }\n\n    async handleWriteConfig() {\n        if (!this.selectedProject) return;\n\n        // Must be connected to device first\n        if (!this.deviceConnection.getIsConnected()) {\n            this.ui.log('Please connect to device first', 'warning');\n            this.ui.updateStatus('waiting', 'Not connected', 'Click \"Connect Device\" first');\n            return;\n        }\n\n        // Check if project has NVS configuration\n        if (!this.selectedProject.nvsPartition) {\n            this.ui.log('This project does not have NVS configuration', 'warning');\n            return;\n        }\n\n        try {\n            // Disable the Write Config button during write\n            this.btnWriteConfig.disabled = true;\n            this.btnWriteConfig.textContent = 'Writing...';\n\n            this.ui.updateStatus('flashing', 'Writing configuration', 'Generating NVS partition...');\n            this.ui.log('Writing configuration to device...', 'info');\n\n            const espStub = this.deviceConnection.getESPStub();\n            if (!espStub) {\n                throw new Error('Device not connected');\n            }\n\n            // Generate NVS partition from current config\n            const config = this.configManager.getConfig();\n            const namespace = this.selectedProject.nvsPartition.namespace || 'config';\n            const nvsData = {};\n            nvsData[namespace] = {};\n\n            this.selectedProject.configSections.forEach(section => {\n                section.fields.forEach(field => {\n                    if (field.nvsKey) {\n                        const value = config[section.id]?.[field.id];\n                        if (value !== undefined && value !== '') {\n                            nvsData[namespace][field.nvsKey] = value;\n                        }\n                    }\n                });\n            });\n\n            // Log what we're about to write\n            const nvsKeys = Object.keys(nvsData[namespace]);\n            this.ui.log(`NVS data to write: ${nvsKeys.join(', ')}`, 'info');\n            nvsKeys.forEach(key => {\n                const value = nvsData[namespace][key];\n                this.ui.log(`  ${key} = ${value}`, 'info');\n            });\n\n            // Generate NVS partition binary\n            const generator = new NVSGenerator();\n            const partitionSize = parseInt(this.selectedProject.nvsPartition.size, 16);\n            const nvsBytes = generator.generate(nvsData, partitionSize);\n\n            // Convert NVS bytes to binary string\n            let nvsBinary = '';\n            for (let i = 0; i < nvsBytes.length; i++) {\n                nvsBinary += String.fromCharCode(nvsBytes[i]);\n            }\n\n            this.ui.log(`Generated NVS partition: ${nvsBytes.length} bytes`, 'info');\n\n            // Write just the NVS partition to flash\n            const nvsOffset = parseInt(this.selectedProject.nvsPartition.offset, 16);\n            const fileArray = [{ data: nvsBinary, address: nvsOffset }];\n\n            this.ui.updateStatus('flashing', 'Writing to flash...', 'Do not disconnect');\n            this.ui.showProgress();\n\n            await espStub.writeFlash({\n                fileArray: fileArray,\n                flashSize: 'keep',\n                compress: true,\n                reportProgress: (idx, written, total) => {\n                    const percent = Math.round((written / total) * 100);\n                    this.ui.updateProgress(percent, written, total);\n                }\n            });\n\n            this.ui.updateStatus('success', 'Configuration written!', 'Config updated on device');\n            this.ui.log(`\u2713 Wrote ${nvsKeys.length} configuration values to device`, 'success');\n\n            // Hide button after successful write\n            this.btnWriteConfig.style.display = 'none';\n\n        } catch (error) {\n            this.ui.log(`Failed to write configuration: ${error.message}`, 'error');\n            this.ui.updateStatus('error', 'Write failed', error.message);\n            this.btnWriteConfig.disabled = false;\n            this.btnWriteConfig.textContent = 'Write Config';\n        }\n    }\n\n    exportLog() {\n        const monitor = document.getElementById('serial-monitor');\n        const lines = monitor.querySelectorAll('.serial-line');\n        const logText = Array.from(lines).map(line => line.textContent).join('\\n');\n\n        const blob = new Blob([logText], { type: 'text/plain' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `flasher-log-${new Date().toISOString().replace(/[:.]/g, '-')}.txt`;\n        a.click();\n        URL.revokeObjectURL(url);\n\n        this.ui.log('Log exported successfully', 'success');\n    }\n\n    initializeUIElements() {\n        // No special initialization needed\n    }\n\n\n    handleDevTabClick(tab) {\n        const tabName = tab.dataset.tab;\n\n        // Update tab buttons (use classes only, let CSS handle styling)\n        document.querySelectorAll('.dev-tab').forEach(t => {\n            t.classList.remove('active');\n        });\n        tab.classList.add('active');\n\n        // Update tab content (use classes only, let CSS handle display)\n        document.querySelectorAll('.dev-tab-content').forEach(content => {\n            content.classList.remove('active');\n        });\n        document.querySelector(`.dev-tab-content[data-tab=\"${tabName}\"]`).classList.add('active');\n    }\n\n    handleFirmwareSourceChange(e) {\n        if (e.target.value === 'release') {\n            document.getElementById('release-options').style.display = 'block';\n            document.getElementById('custom-options').style.display = 'none';\n        } else {\n            document.getElementById('release-options').style.display = 'none';\n            document.getElementById('custom-options').style.display = 'block';\n        }\n    }\n\n    handleCustomFileUpload(e) {\n        const file = e.target.files[0];\n        const info = document.getElementById('custom-file-info');\n        if (file) {\n            const sizeMB = (file.size / 1024 / 1024).toFixed(2);\n            info.textContent = `${file.name} (${sizeMB} MB)`;\n        } else {\n            info.textContent = '';\n        }\n    }\n\n    toggleTroubleshooting() {\n        const toggle = document.getElementById('troubleshooting-toggle');\n        const content = document.getElementById('troubleshooting-content');\n        toggle.classList.toggle('collapsed');\n        content.classList.toggle('active');\n    }\n\n    openAboutPanel() {\n        const panel = document.getElementById('about-panel');\n        const backdrop = document.getElementById('about-backdrop');\n        panel.classList.add('active');\n        backdrop.classList.add('active');\n        document.body.classList.add('dev-panel-open');\n    }\n\n    closeAboutPanel() {\n        const panel = document.getElementById('about-panel');\n        const backdrop = document.getElementById('about-backdrop');\n        panel.classList.remove('active');\n        backdrop.classList.remove('active');\n        document.body.classList.remove('dev-panel-open');\n    }\n}\n"],
  "mappings": "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",
  "names": ["FlasherUI", "ConfigManager", "DeviceConnection", "FirmwareFlasher", "FlasherApp", "projects", "ports", "lastDeviceIndex", "deviceIndex", "port", "chipType", "macAddr", "connectError", "error", "projectDetails", "configContainer", "devModeToggle", "panel", "backdrop", "toggle", "devOptionsClose", "devPanelBackdrop", "e", "btnExportLog", "tab", "radio", "devCustomFile", "troubleshootingToggle", "aboutLink", "aboutClose", "aboutBackdrop", "options", "espStub", "firmwareSource", "fileInput", "config", "namespace", "nvsData", "section", "field", "value", "nvsKeys", "key", "generator", "partitionSize", "nvsBytes", "nvsBinary", "i", "nvsOffset", "fileArray", "idx", "written", "total", "percent", "lines", "logText", "line", "blob", "url", "a", "tabName", "t", "content", "file", "info", "sizeMB"]
}
