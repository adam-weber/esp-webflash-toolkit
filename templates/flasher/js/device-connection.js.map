{
  "version": 3,
  "sources": ["../src/device-connection.js"],
  "sourcesContent": ["/**\n * Device Connection Handler for ESP32 Web Flasher\n * Manages serial connection and chip detection\n */\n\nexport class DeviceConnection {\n    constructor(ui) {\n        this.ui = ui;\n        this.transport = null;\n        this.espStub = null;\n        this.isConnected = false;\n    }\n\n    getChipOverrides() {\n        const stored = localStorage.getItem('chip-overrides');\n        return stored ? JSON.parse(stored) : {};\n    }\n\n    saveChipOverride(detectedChip, expectedChip) {\n        const overrides = this.getChipOverrides();\n        overrides[detectedChip] = expectedChip;\n        localStorage.setItem('chip-overrides', JSON.stringify(overrides));\n    }\n\n    clearChipOverride(detectedChip) {\n        const overrides = this.getChipOverrides();\n        delete overrides[detectedChip];\n        localStorage.setItem('chip-overrides', JSON.stringify(overrides));\n    }\n\n    async showChipMismatchDialog(expectedChip, detectedChip) {\n        return new Promise((resolve) => {\n            // Show inline in status box\n            const statusBox = document.getElementById('status-box');\n            const originalContent = statusBox.innerHTML;\n\n            statusBox.className = 'status-box waiting';\n            statusBox.innerHTML = `\n                <div class=\"status-text\">Chip Mismatch</div>\n                <div class=\"status-subtext\" style=\"margin-bottom: 12px;\">Expected ${expectedChip}, found ${detectedChip}</div>\n                <div style=\"display: flex; gap: 8px;\">\n                    <button id=\"chip-btn-cancel\" class=\"btn btn-primary\" style=\"flex: 1; font-size: 13px; padding: 8px 12px;\">\n                        Cancel\n                    </button>\n                    <button id=\"chip-btn-once\" class=\"btn btn-secondary\" style=\"flex: 1; font-size: 13px; padding: 8px 12px;\">\n                        Continue\n                    </button>\n                    <button id=\"chip-btn-always\" class=\"btn btn-secondary\" style=\"flex: 1; font-size: 13px; padding: 8px 12px;\">\n                        Always Allow\n                    </button>\n                </div>\n            `;\n\n            const cleanup = () => {\n                statusBox.innerHTML = originalContent;\n            };\n\n            document.getElementById('chip-btn-cancel').addEventListener('click', () => {\n                cleanup();\n                resolve('cancel');\n            });\n\n            document.getElementById('chip-btn-once').addEventListener('click', () => {\n                cleanup();\n                resolve('once');\n            });\n\n            document.getElementById('chip-btn-always').addEventListener('click', () => {\n                cleanup();\n                resolve('always');\n            });\n        });\n    }\n\n    async disconnect() {\n        if (this.transport) {\n            try {\n                await this.transport.disconnect();\n                this.ui.log('Disconnected from device', 'info');\n            } catch (e) {\n                // Ignore disconnect errors\n            }\n        }\n        this.transport = null;\n        this.espStub = null;\n        this.isConnected = false;\n    }\n\n    async connect(project, options = {}) {\n        // Clean up any existing connection first\n        if (this.transport || this.isConnected) {\n            this.ui.log('Cleaning up previous connection...', 'warning');\n            await this.disconnect();\n        }\n\n        // Get skip chip check option from developer options\n        const devSkipChipCheck = options.skipChipCheck || false;\n\n        try {\n            let port = options.port; // Use provided port if available\n\n            if (!port) {\n                this.ui.log('Initiating connection to ESP32...', 'info');\n                this.ui.updateStatus('waiting', 'Connecting...', 'Select your device from the prompt');\n\n                port = await navigator.serial.requestPort();\n\n                // Store device for auto-reconnect\n                const ports = await navigator.serial.getPorts();\n                const deviceIndex = ports.indexOf(port);\n                if (deviceIndex !== -1) {\n                    localStorage.setItem('lastSerialDeviceIndex', deviceIndex.toString());\n                }\n            }\n\n            this.ui.log('Opening serial port...', 'info');\n            this.ui.updateStatus('waiting', 'Opening port...', 'Establishing connection');\n\n            // Import Transport and ESPLoader from esptool-js\n            const { Transport, ESPLoader } = await import('https://unpkg.com/esptool-js@0.4.5/bundle.js');\n\n            this.transport = new Transport(port, true);\n\n            this.ui.log('Initializing esptool...', 'info');\n            this.ui.updateStatus('waiting', 'Initializing...', 'Detecting chip type');\n\n            this.espStub = new ESPLoader({\n                transport: this.transport,\n                baudrate: 115200,\n                terminal: {\n                    clean: () => {},\n                    writeLine: (data) => this.ui.log(data, 'info'),\n                    write: (data) => this.ui.log(data, 'info')\n                }\n            });\n\n            // Add timeout to prevent infinite loops\n            const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => {\n                    reject(new Error('Connection timeout - device not responding. Make sure you selected the correct serial port (not Bluetooth) and try holding the BOOT button.'));\n                }, 15000); // 15 second timeout\n            });\n\n            const chipType = await Promise.race([\n                this.espStub.main(),\n                timeoutPromise\n            ]);\n\n            this.ui.log('Chip: ' + chipType, 'info');\n\n            let macAddr = null;\n            if (this.espStub.chip && this.espStub.chip.macAddr) {\n                macAddr = this.espStub.chip.macAddr();\n                this.ui.log('MAC Address: ' + macAddr, 'info');\n                this.ui.updateChipInfo(chipType, macAddr);\n            }\n\n            // Check chip type matches project\n            if (project.chip && chipType) {\n                const expectedChip = project.chip.toUpperCase();\n                const detectedChip = chipType.toUpperCase();\n                const chipMismatch = !detectedChip.includes(expectedChip.replace('ESP32-', ''));\n\n                // Check if user has a stored override for this chip\n                const storedOverrides = this.getChipOverrides();\n                const hasStoredOverride = storedOverrides[detectedChip] === expectedChip;\n\n                if (chipMismatch) {\n                    // Developer option to skip all checks\n                    if (devSkipChipCheck) {\n                        this.ui.log(`Chip validation skipped (dev option): Expected ${expectedChip}, detected ${chipType}`, 'warning');\n                    }\n                    // Stored override for this specific chip\n                    else if (hasStoredOverride) {\n                        this.ui.log(`Chip mismatch allowed (saved preference): Expected ${expectedChip}, detected ${chipType}`, 'warning');\n                    }\n                    // Show warning dialog\n                    else {\n                        this.ui.log(`Chip mismatch: Expected ${expectedChip}, but detected ${chipType}`, 'warning');\n                        this.ui.updateStatus('waiting', 'Chip mismatch detected', `Expected ${expectedChip} but found ${chipType}`);\n\n                        // Show warning dialog with options\n                        const userChoice = await this.showChipMismatchDialog(expectedChip, chipType);\n\n                        if (userChoice === 'cancel') {\n                            this.ui.log('Connection cancelled by user', 'info');\n                            this.ui.updateStatus('waiting', 'Connection cancelled', 'Select a device and try again');\n                            await this.disconnect();\n                            const chipError = new Error('Chip mismatch - user cancelled');\n                            chipError.isChipMismatch = true;\n                            throw chipError;\n                        } else if (userChoice === 'always') {\n                            this.saveChipOverride(detectedChip, expectedChip);\n                            this.ui.log(`Saved override: ${detectedChip} \u2192 ${expectedChip}`, 'success');\n                        }\n\n                        this.ui.log(`Proceeding with ${chipType} (user override)`, 'warning');\n                    }\n                }\n            }\n\n            this.isConnected = true;\n            this.ui.updateStatus('connected', 'Device connected', 'Ready to flash firmware');\n            this.ui.log(`Connected to ${chipType}`, 'success');\n\n            return { chipType, macAddr };\n\n        } catch (error) {\n            // Clean up on error\n            await this.disconnect();\n            // Only call handleConnectionError if we haven't already set a specific status\n            if (!error.isChipMismatch) {\n                this.handleConnectionError(error);\n            }\n            throw error;\n        }\n    }\n\n    handleConnectionError(error) {\n        // Handle port already open\n        if (error.message && error.message.includes('port is already open')) {\n            this.ui.log('Port is already open - please refresh the page', 'error');\n            this.ui.updateStatus('error', 'Port already open', 'Refresh the page (Ctrl+R or Cmd+R) and try again');\n            return;\n        }\n\n        // Handle esptool library not loaded\n        if (error.message && (error.message.includes('Transport is not defined') || error.message.includes('ESPLoader is not defined'))) {\n            this.ui.log('ESPTool library failed to load', 'error');\n            this.ui.updateStatus('error', 'Library loading error', 'Please refresh the page and ensure you have internet connection');\n            return;\n        }\n\n        // Handle user cancellation\n        if (error.message && error.message.includes('No port selected')) {\n            this.ui.log('Port selection cancelled by user', 'warning');\n            this.ui.updateStatus('waiting', 'Connection cancelled', 'Click \"Connect Device\" to try again');\n            return;\n        }\n\n        // Handle permission denied\n        if (error.message && (error.message.includes('permission') || error.message.includes('access denied'))) {\n            this.ui.log('Permission denied: ' + error.message, 'error');\n            this.ui.updateStatus('error', 'Permission denied', 'Close other programs using the serial port and try again');\n            return;\n        }\n\n        // Handle connection timeout\n        if (error.message && (error.message.includes('timeout') || error.message.includes('Failed to connect') || error.message.includes('not responding'))) {\n            this.ui.log('Connection timeout: ' + error.message, 'error');\n            this.ui.updateStatus('error', 'Device not responding', 'Wrong port selected or device not in download mode. Hold BOOT button and try again.');\n            return;\n        }\n\n        // Handle wrong chip type\n        if (error.message && error.message.includes('chip')) {\n            this.ui.log('Wrong device type: ' + error.message, 'error');\n            this.ui.updateStatus('error', 'Wrong device detected', 'Make sure you selected the correct ESP32 device');\n            return;\n        }\n\n        // Handle esptool API errors\n        if (error.message && (error.message.includes('getInfo') || error.message.includes('main') || error.message.includes('Cannot read properties'))) {\n            this.ui.log('ESPTool communication error: ' + error.message, 'error');\n            this.ui.updateStatus('error', 'Device communication failed', 'Try holding BOOT button while connecting, or refresh the page');\n            return;\n        }\n\n        // Generic error\n        this.ui.log('Connection error: ' + error.message, 'error');\n        this.ui.updateStatus('error', 'Connection failed', 'Check cable connection and try again');\n    }\n\n    getESPStub() {\n        return this.espStub;\n    }\n\n    getIsConnected() {\n        return this.isConnected;\n    }\n\n    /**\n     * Read flash memory from device\n     * @param {number} offset - Flash offset to read from (e.g., 0x9000 for NVS)\n     * @param {number} size - Number of bytes to read\n     * @returns {Uint8Array} - Flash data\n     */\n    async readFlash(offset, size) {\n        if (!this.espStub) {\n            throw new Error('Device not connected');\n        }\n\n        this.ui.log(`Reading ${size} bytes from flash at offset 0x${offset.toString(16)}...`, 'info');\n\n        try {\n            // Read flash using esptool-js API\n            const flashData = await this.espStub.readFlash(offset, size);\n\n            this.ui.log(`\u2713 Read ${flashData.length} bytes successfully`, 'success');\n            return new Uint8Array(flashData);\n        } catch (error) {\n            this.ui.log(`Failed to read flash: ${error.message}`, 'error');\n            throw error;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["DeviceConnection", "ui", "stored", "detectedChip", "expectedChip", "overrides", "resolve", "statusBox", "originalContent", "cleanup", "project", "options", "devSkipChipCheck", "port", "deviceIndex", "Transport", "ESPLoader", "data", "timeoutPromise", "_", "reject", "chipType", "macAddr", "chipMismatch", "hasStoredOverride", "userChoice", "chipError", "error", "offset", "size", "flashData"]
}
