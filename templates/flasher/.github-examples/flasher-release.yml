# Example GitHub Actions workflow for ESP32 Web Flasher integration
# Copy this file to your repository's .github/workflows/ directory
#
# This workflow:
# 1. Builds ESP32 firmware on releases/tags
# 2. Generates flasher configuration from project.json files
# 3. Deploys web flasher to GitHub Pages
#
# Usage:
#   1. Copy this file to .github/workflows/flasher-release.yml
#   2. Copy generate_flasher_config.py to scripts/
#   3. Create sensors/your-project/project.json with config schema
#   4. Push a tag: git tag v1.0.0 && git push --tags

name: Build and Deploy ESP32 Flasher

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Discover all ESP32 projects in sensors/ directory
  discover-projects:
    name: Discover ESP32 Projects
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.find-projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v4

      - name: Find all projects with project.json
        id: find-projects
        run: |
          # Find all directories in sensors/ that have a project.json file
          projects=$(find sensors -maxdepth 2 -name "project.json" -exec dirname {} \; | xargs -I {} basename {} | jq -R -s -c 'split("\n")[:-1]')
          echo "projects=$projects" >> $GITHUB_OUTPUT
          echo "Found projects: $projects"

  # Build firmware for each discovered project
  build-firmware:
    name: Build ${{ matrix.project }}
    needs: discover-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover-projects.outputs.projects) }}
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src

      - name: Install ESP-IDF prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

      - name: Install ESP Rust tools
        run: |
          cargo install espup cargo-espflash espflash
          espup install
          . $HOME/export-esp.sh
          rustup component add rust-src --toolchain stable

      - name: Build firmware
        run: |
          . $HOME/export-esp.sh
          cd sensors/${{ matrix.project }}
          cargo build --release --target riscv32imc-esp-espidf

      - name: Generate flashable binary
        run: |
          . $HOME/export-esp.sh
          cd sensors/${{ matrix.project }}
          mkdir -p ../../firmware-output

          # Generate merged binary (includes bootloader + partition table + app)
          cargo espflash save-image \
            --chip esp32c3 \
            --merge \
            ../../firmware-output/${{ matrix.project }}.bin \
            target/riscv32imc-esp-espidf/release/${{ matrix.project }}

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.project }}
          path: firmware-output/${{ matrix.project }}.bin

  # Create GitHub release with firmware binaries
  create-release:
    name: Create Release
    needs: build-firmware
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-firmware.outputs.version }}
          name: Release ${{ needs.build-firmware.outputs.version }}
          body: |
            ESP32 Firmware Release ${{ needs.build-firmware.outputs.version }}

            ## Flash Instructions

            **Web Flasher (Recommended):**
            Visit https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/flasher/

            **Manual Flash:**
            ```bash
            esptool.py --chip esp32c3 write_flash 0x0 firmware.bin
            ```
          files: firmware-artifacts/firmware-*/*.bin
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Generate flasher config and deploy to GitHub Pages
  deploy-flasher:
    name: Deploy Web Flasher
    needs: [build-firmware, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Generate flasher configuration
        env:
          VERSION: ${{ needs.build-firmware.outputs.version }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CI: true
        run: |
          # Generate projects-config.js from sensors/*/project.json
          python3 scripts/generate_flasher_config.py > docs/flasher/js/projects-config.js

          echo "Generated configuration:"
          cat docs/flasher/js/projects-config.js

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
